// Mock data and state management
let currentScreen = 'dashboard';
let dailyCalories = 1020;
let calorieGoal = 1800;
let currentAction = null;

// Mock restaurant data in Thai
const nearbyRestaurants = [
    {
        id: 1,
        name: "‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏ß‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß",
        distance: "500 ‡∏°.",
        rating: 4.8,
        healthyOptions: ["‡πÇ‡∏ö‡∏•‡∏≠‡∏Å‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô", "‡∏™‡∏•‡∏±‡∏î‡∏Ñ‡∏ß‡∏¥‡∏ô‡∏±‡∏ß", "‡∏ã‡∏∏‡∏õ‡∏ú‡∏±‡∏Å"],
        address: "123 ‡∏ñ.‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
        phone: "02-123-4567",
        cuisine: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
        emoji: "ü•ó"
    },
    {
        id: 2,
        name: "‡∏ö‡∏¥‡∏™‡πÇ‡∏ó‡∏£‡πà‡∏™‡∏î‡πÉ‡∏™",
        distance: "800 ‡∏°.", 
        rating: 4.6,
        healthyOptions: ["‡πÇ‡∏ö‡∏•‡∏≠‡πÄ‡∏°‡∏î‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏£‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô", "‡πÅ‡∏£‡πá‡∏õ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô", "‡∏û‡∏≤‡∏£‡πå‡πÄ‡∏ü‡∏ï‡πå‡∏ú‡∏•‡πÑ‡∏°‡πâ"],
        address: "456 ‡∏ñ.‡πÄ‡∏ß‡∏•‡πÄ‡∏ô‡∏™",
        phone: "02-234-5678",
        cuisine: "‡πÄ‡∏°‡∏î‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏£‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô",
        emoji: "üåø"
    },
    {
        id: 3,
        name: "‡∏°‡∏∏‡∏°‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£",
        distance: "1.2 ‡∏Å‡∏°.",
        rating: 4.7,
        healthyOptions: ["‡πÇ‡∏≠‡πä‡∏ï‡∏°‡∏µ‡∏•‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÉ‡∏à", "‡∏™‡∏•‡∏±‡∏î‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á", "‡∏ú‡∏±‡∏Å‡∏ô‡∏∂‡πà‡∏á"],
        address: "789 ‡∏ñ.‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ",
        phone: "02-345-6789",
        cuisine: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
        emoji: "üíö"
    },
    {
        id: 4,
        name: "‡πÑ‡∏î‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏",
        distance: "1.8 ‡∏Å‡∏°.",
        rating: 4.5,
        healthyOptions: ["‡∏ã‡∏∏‡∏õ‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡∏ï‡πà‡∏≥", "‡∏õ‡∏•‡∏≤‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏ú‡∏±‡∏Å", "‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á‡πÇ‡∏Æ‡∏•‡πÄ‡∏Å‡∏£‡∏ô"],
        address: "321 ‡∏ñ.‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏ß‡∏±‡∏¢",
        phone: "02-456-7890",
        cuisine: "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢",
        emoji: "üëµ"
    }
];

// Mock Thai food database for recognition
const thaiFoodDatabase = [
    {
        id: 1,
        name: "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á",
        emoji: "üç§",
        calories: 520,
        protein: 25,
        carbs: 75,
        fat: 12,
        fiber: 3,
        sodium: 1200,
        confidence: 0.92
    },
    {
        id: 2,
        name: "‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢",
        emoji: "ü•ó",
        calories: 120,
        protein: 8,
        carbs: 25,
        fat: 2,
        fiber: 6,
        sodium: 800,
        confidence: 0.88
    },
    {
        id: 3,
        name: "‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏Å‡πà",
        emoji: "üçõ",
        calories: 350,
        protein: 30,
        carbs: 15,
        fat: 20,
        fiber: 4,
        sodium: 950,
        confidence: 0.85
    },
    {
        id: 4,
        name: "‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î",
        emoji: "üçú",
        calories: 450,
        protein: 22,
        carbs: 65,
        fat: 15,
        fiber: 5,
        sodium: 1100,
        confidence: 0.90
    },
    {
        id: 5,
        name: "‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß",
        emoji: "ü•≠",
        calories: 280,
        protein: 4,
        carbs: 55,
        fat: 8,
        fiber: 3,
        sodium: 50,
        confidence: 0.87
    }
];

// User's daily nutrition targets
const dailyTargets = {
    calories: 1800,
    protein: 90,      // grams
    carbs: 225,       // grams
    fat: 60,          // grams
    fiber: 25,        // grams
    sodium: 2300      // mg
};

// Current daily intake (mock data)
let currentIntake = {
    calories: 1020,
    protein: 45,
    carbs: 120,
    fat: 35,
    fiber: 12,
    sodium: 1500
};

// Mock food recommendations in Thai
const foodRecommendations = [
    {
        id: 1,
        name: "‡πÇ‡∏¢‡πÄ‡∏Å‡∏¥‡∏£‡πå‡∏ï‡∏Å‡∏£‡∏µ‡∏Å‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡∏µ‡πà",
        calories: 150,
        reason: "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô",
        nutrients: "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô 20g, ‡πÇ‡∏õ‡∏£‡πÑ‡∏ö‡πÇ‡∏≠‡∏ï‡∏¥‡∏Å",
        time: "‡∏Ç‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢",
        emoji: "ü´ê"
    },
    {
        id: 2,
        name: "‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡πá‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏•‡∏µ‡πà",
        calories: 420,
        reason: "‡πÇ‡∏≠‡πÄ‡∏°‡∏Å‡πâ‡∏≤-3 ‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÉ‡∏à",
        nutrients: "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô 35g, ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏î‡∏µ",
        time: "‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô",
        emoji: "üêü"
    },
    {
        id: 3,
        name: "‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á‡πÇ‡∏Æ‡∏•‡πÄ‡∏Å‡∏£‡∏ô‡∏Å‡∏±‡∏ö‡∏≠‡∏∞‡πÇ‡∏ß‡∏Ñ‡∏≤‡πÇ‡∏î",
        calories: 280,
        reason: "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡πÉ‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏π‡∏á",
        nutrients: "‡πÉ‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 8g, ‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°",
        time: "‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ö‡∏≤",
        emoji: "ü•ë"
    },
    {
        id: 4,
        name: "‡∏ñ‡∏±‡πà‡∏ß‡∏£‡∏ß‡∏° (30g)",
        calories: 160,
        reason: "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡∏≠‡∏µ",
        nutrients: "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô 6g, ‡πÅ‡∏°‡∏Å‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏°",
        time: "‡∏Ç‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á",
        emoji: "ü•ú"
    }
];

// Calculate what nutrients user needs more of
function getNutritionNeeds() {
    const currentProtein = 75; // Mock current protein intake
    const proteinGoal = 90;
    const remainingCalories = calorieGoal - dailyCalories;
    
    const needs = [];
    
    if (currentProtein < proteinGoal) {
        needs.push("protein");
    }
    
    if (remainingCalories > 300) {
        needs.push("calories");
    }
    
    if (dailyCalories < 800) {
        needs.push("fiber");
    }
    
    return needs;
}

// Screen navigation
function showScreen(screenName) {
    // Hide all screens
    const screens = document.querySelectorAll('.screen');
    screens.forEach(screen => screen.classList.remove('active'));
    
    // Show selected screen
    const targetScreen = document.getElementById(screenName + '-screen');
    if (targetScreen) {
        targetScreen.classList.add('active');
    }
    
    // Update navigation buttons
    const navButtons = document.querySelectorAll('.nav-btn');
    navButtons.forEach(btn => btn.classList.remove('active'));
    
    const activeBtn = document.querySelector(`[onclick="showScreen('${screenName}')"]`);
    if (activeBtn) {
        activeBtn.classList.add('active');
    }
    
    currentScreen = screenName;
}

// Photo upload functions
function triggerPhotoUpload() {
    const photoInput = document.getElementById('photo-input');
    photoInput.click();
}

function handlePhotoUpload(event) {
    try {
        const file = event.target.files[0];
        if (!file) return;

        // Validate file type
        if (!file.type.startsWith('image/')) {
            showModal(
                '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
                '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
                null
            );
            return;
        }

        // Create a URL for the uploaded image
        const imageUrl = URL.createObjectURL(file);

        // Show loading state
        showModal(
            'üì∑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...',
            'üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...\n\n‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà',
            null
        );

        // Simulate AI processing time
        setTimeout(() => {
            try {
                closeModal();
                
                // Mock food recognition - randomly select a Thai food
                if (!thaiFoodDatabase || thaiFoodDatabase.length === 0) {
                    throw new Error('Thai food database not available');
                }
                const recognizedFood = thaiFoodDatabase[Math.floor(Math.random() * thaiFoodDatabase.length)];
                
                // Display analysis results with the uploaded image
                displayNutrientAnalysis(recognizedFood, imageUrl);
                
                // Update daily intake
                updateDailyIntake(recognizedFood);
                
                // Show restaurant suggestions after analysis
                setTimeout(() => {
                    displayRestaurantSuggestionsBasedOnDeficiency();
                }, 1500);
                
            } catch (error) {
                console.error('Error during food analysis:', error);
                showModal(
                    '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
                    '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                    null
                );
            }
        }, 2000);
        
    } catch (error) {
        console.error('Error handling photo upload:', error);
        showModal(
            '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
            null
        );
    }
}

function displayNutrientAnalysis(food, imageUrl = null) {
    try {
        const analysisContainer = document.getElementById('nutrient-analysis');
        const resultContainer = document.getElementById('food-analysis-result');
        
        if (!analysisContainer || !resultContainer) {
            console.error('Required elements not found');
            showModal(
                '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
                '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà',
                null
            );
            return;
        }
        
        if (!food) {
            console.error('No food data provided');
            showModal(
                '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
                '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                null
            );
            return;
        }
    
    // Calculate nutrition deficiencies
    const deficiencies = calculateNutrientDeficiencies(food);
    
    resultContainer.innerHTML = `
        <div class="nutrient-analysis-result">
            <!-- Detected Food -->
            <div class="food-detected">
                ${imageUrl ? `<img src="${imageUrl}" alt="‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î" class="uploaded-image">` : `<span class="food-detected-emoji">${food.emoji}</span>`}
                <div class="food-detected-name">${food.name}</div>
                <div class="food-detected-confidence">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: ${Math.round(food.confidence * 100)}%</div>
            </div>
            
            <!-- Nutrient Grid -->
            <div class="nutrient-grid">
                <div class="nutrient-item">
                    <span class="nutrient-icon">üî•</span>
                    <div class="nutrient-value">${food.calories}</div>
                    <div class="nutrient-label">‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà</div>
                </div>
                <div class="nutrient-item">
                    <span class="nutrient-icon">üí™</span>
                    <div class="nutrient-value">${food.protein}g</div>
                    <div class="nutrient-label">‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô</div>
                </div>
                <div class="nutrient-item">
                    <span class="nutrient-icon">üåæ</span>
                    <div class="nutrient-value">${food.carbs}g</div>
                    <div class="nutrient-label">‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï</div>
                </div>
                <div class="nutrient-item">
                    <span class="nutrient-icon">ü•ë</span>
                    <div class="nutrient-value">${food.fat}g</div>
                    <div class="nutrient-label">‡πÑ‡∏Ç‡∏°‡∏±‡∏ô</div>
                </div>
                <div class="nutrient-item">
                    <span class="nutrient-icon">üåø</span>
                    <div class="nutrient-value">${food.fiber}g</div>
                    <div class="nutrient-label">‡πÉ‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£</div>
                </div>
                <div class="nutrient-item">
                    <span class="nutrient-icon">üßÇ</span>
                    <div class="nutrient-value">${food.sodium}mg</div>
                    <div class="nutrient-label">‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°</div>
                </div>
            </div>
            
            ${deficiencies.length > 0 ? `
            <!-- Deficiency Analysis -->
            <div class="deficiency-analysis">
                <div class="deficiency-title">
                    <span>‚ö†Ô∏è</span>
                    <span>‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏î</span>
                </div>
                <ul class="deficiency-list">
                    ${deficiencies.map(def => `
                        <li class="deficiency-item">${def}</li>
                    `).join('')}
                </ul>
            </div>
            ` : `
            <div class="deficiency-analysis" style="background: #d4edda; border-color: #c3e6cb;">
                <div class="deficiency-title" style="color: #155724;">
                    <span>‚úÖ</span>
                    <span>‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ!</span>
                </div>
            </div>
            `}
        </div>
    `;
    
        // Show the analysis section
        analysisContainer.style.display = 'block';
        
        // Scroll to show the analysis
        analysisContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
    } catch (error) {
        console.error('Error displaying nutrient analysis:', error);
        showModal(
            '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
            null
        );
    }
}

function updateDailyIntake(food) {
    // Update current intake with the analyzed food
    currentIntake.calories += food.calories;
    currentIntake.protein += food.protein;
    currentIntake.carbs += food.carbs;
    currentIntake.fat += food.fat;
    currentIntake.fiber += food.fiber;
    currentIntake.sodium += food.sodium;
    
    // Update the progress bar and daily calories display
    dailyCalories = currentIntake.calories;
    updateProgressBar();
}

function calculateNutrientDeficiencies(addedFood) {
    const deficiencies = [];
    const futureIntake = {
        calories: currentIntake.calories + addedFood.calories,
        protein: currentIntake.protein + addedFood.protein,
        carbs: currentIntake.carbs + addedFood.carbs,
        fat: currentIntake.fat + addedFood.fat,
        fiber: currentIntake.fiber + addedFood.fiber,
        sodium: currentIntake.sodium + addedFood.sodium
    };
    
    if (futureIntake.protein < dailyTargets.protein * 0.8) {
        const needed = Math.round(dailyTargets.protein - futureIntake.protein);
        deficiencies.push(`‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡∏Å ${needed}g`);
    }
    
    if (futureIntake.fiber < dailyTargets.fiber * 0.6) {
        const needed = Math.round(dailyTargets.fiber - futureIntake.fiber);
        deficiencies.push(`‡πÉ‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£ - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡∏Å ${needed}g`);
    }
    
    if (futureIntake.calories < dailyTargets.calories * 0.7) {
        const needed = Math.round(dailyTargets.calories - futureIntake.calories);
        deficiencies.push(`‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡∏Å ${needed} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà`);
    }
    
    if (futureIntake.carbs < dailyTargets.carbs * 0.5) {
        const needed = Math.round(dailyTargets.carbs - futureIntake.carbs);
        deficiencies.push(`‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡∏Å ${needed}g`);
    }
    
    return deficiencies;
}

// Legacy function - kept for compatibility
function handleTakePhoto() {
    triggerPhotoUpload();
}


// Food recommendation functions
function populateFoodRecommendations() {
    const container = document.getElementById('food-recommendations');
    if (!container) return;
    
    const needs = getNutritionNeeds();
    const relevantRecommendations = foodRecommendations.filter(food => {
        if (needs.includes('protein') && food.nutrients.includes('protein')) return true;
        if (needs.includes('calories') && food.calories > 200) return true;
        if (needs.includes('fiber') && food.nutrients.includes('fiber')) return true;
        return false;
    }).slice(0, 2); // Show only 2 recommendations
    
    container.innerHTML = '';
    
    relevantRecommendations.forEach(food => {
        const foodItem = document.createElement('div');
        foodItem.className = 'recommendation-item';
        foodItem.innerHTML = `
            <div class="meal-image" style="margin-right: 5px;">${food.emoji}</div>
            <div class="recommendation-info" style="margin-right: 5px;">
                <h4>${food.name}</h4>
                <p class="reason">${food.reason}</p>
            </div>
            <div class="recommendation-calories">
                ${food.calories} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
            </div>
        `;
        foodItem.addEventListener('click', () => {
            showElderFriendlyModal(
                'üçΩÔ∏è ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
                {
                    emoji: food.emoji,
                    name: food.name,
                    calories: food.calories,
                    nutrients: food.nutrients,
                    time: food.time,
                    reason: food.reason
                },
                'food-detail'
            );
        });
        container.appendChild(foodItem);
    });
}

function showAllRecommendations() {
    showElderFriendlyModal(
        'üçΩÔ∏è ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
        foodRecommendations,
        'all-recommendations'
    );
}

// Restaurant suggestion functions
function displayRestaurantSuggestionsBasedOnDeficiency() {
    const container = document.getElementById('restaurant-suggestions');
    const listContainer = document.getElementById('restaurant-list');
    
    if (!container || !listContainer) return;
    
    // Calculate current deficiencies to recommend appropriate restaurants
    const deficiencies = calculateCurrentDeficiencies();
    
    // Update header to show why these restaurants are suggested
    const headerElement = container.querySelector('.card-header h3');
    if (headerElement) {
        if (deficiencies.length > 0) {
            headerElement.textContent = '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì';
        } else {
            headerElement.textContent = '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á';
        }
    }
    
    // Show the restaurant suggestions section
    container.style.display = 'block';
    
    // Populate restaurant list with deficiency-based recommendations
    listContainer.innerHTML = '';
    
    nearbyRestaurants.slice(0, 3).forEach(restaurant => {
        const restaurantItem = document.createElement('div');
        restaurantItem.className = 'restaurant-item';
        
        // Determine recommended foods based on deficiencies
        const recommendedFoods = getRecommendedFoodsForDeficiency(restaurant, deficiencies);
        
        restaurantItem.innerHTML = `
            <div class="meal-image">${restaurant.emoji}</div>
            <div class="restaurant-info">
                <h4>${restaurant.name}</h4>
                <div class="restaurant-rating">
                    <span>‚≠ê ${restaurant.rating}</span>
                    <span> ‚Ä¢ ${restaurant.cuisine}</span>
                </div>
                <p class="restaurant-options">
                    ${recommendedFoods.length > 0 ? recommendedFoods.join(', ') : restaurant.healthyOptions.slice(0, 2).join(', ')}
                </p>
                ${deficiencies.length > 0 ? `
                <p class="restaurant-recommendation-reason" style="font-size: 14px; color: #22986a; font-style: italic; margin-top: 5px;">
                    üí° ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ï‡πá‡∏°: ${deficiencies.slice(0, 2).join(', ')}
                </p>
                ` : ''}
            </div>
            <div class="restaurant-contact">
                <p class="restaurant-distance">üìç ${restaurant.distance}</p>
                <p>üìû ${restaurant.phone}</p>
            </div>
        `;
        
        restaurantItem.addEventListener('click', () => {
            showRestaurantDetailsWithNutrition(restaurant, deficiencies);
        });
        
        listContainer.appendChild(restaurantItem);
    });
    
    // Scroll to show the suggestions
    container.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

function calculateCurrentDeficiencies() {
    const deficiencies = [];
    
    if (currentIntake.protein < dailyTargets.protein * 0.8) {
        deficiencies.push('‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô');
    }
    
    if (currentIntake.fiber < dailyTargets.fiber * 0.6) {
        deficiencies.push('‡πÉ‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£');
    }
    
    if (currentIntake.calories < dailyTargets.calories * 0.7) {
        deficiencies.push('‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà');
    }
    
    if (currentIntake.carbs < dailyTargets.carbs * 0.5) {
        deficiencies.push('‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï');
    }
    
    return deficiencies;
}

function getRecommendedFoodsForDeficiency(restaurant, deficiencies) {
    const proteinFoods = {
        "‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏ß‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß": ["‡πÇ‡∏ö‡∏•‡∏≠‡∏Å‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô", "‡∏™‡∏•‡∏±‡∏î‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á"],
        "‡∏ö‡∏¥‡∏™‡πÇ‡∏ó‡∏£‡πà‡∏™‡∏î‡πÉ‡∏™": ["‡πÅ‡∏£‡πá‡∏õ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô", "‡πÇ‡∏ö‡∏•‡∏≠‡πÄ‡∏°‡∏î‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏£‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô"],
        "‡∏°‡∏∏‡∏°‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£": ["‡∏™‡∏•‡∏±‡∏î‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á", "‡∏õ‡∏•‡∏≤‡∏ô‡∏∂‡πà‡∏á"],
        "‡πÑ‡∏î‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏": ["‡∏õ‡∏•‡∏≤‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏ú‡∏±‡∏Å", "‡πÑ‡∏Ç‡πà‡∏ï‡πâ‡∏°"]
    };
    
    const fiberFoods = {
        "‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏ß‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß": ["‡∏™‡∏•‡∏±‡∏î‡∏Ñ‡∏ß‡∏¥‡∏ô‡∏±‡∏ß", "‡∏ã‡∏∏‡∏õ‡∏ú‡∏±‡∏Å"],
        "‡∏ö‡∏¥‡∏™‡πÇ‡∏ó‡∏£‡πà‡∏™‡∏î‡πÉ‡∏™": ["‡∏û‡∏≤‡∏£‡πå‡πÄ‡∏ü‡∏ï‡πå‡∏ú‡∏•‡πÑ‡∏°‡πâ", "‡πÇ‡∏ö‡∏•‡∏≠‡∏ú‡∏±‡∏Å"],
        "‡∏°‡∏∏‡∏°‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£": ["‡∏ú‡∏±‡∏Å‡∏ô‡∏∂‡πà‡∏á", "‡πÇ‡∏≠‡πä‡∏ï‡∏°‡∏µ‡∏•"],
        "‡πÑ‡∏î‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏": ["‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á‡πÇ‡∏Æ‡∏•‡πÄ‡∏Å‡∏£‡∏ô", "‡∏ú‡∏±‡∏Å‡∏ï‡πâ‡∏°"]
    };
    
    const calorieFoods = {
        "‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏ß‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß": ["‡πÇ‡∏ö‡∏•‡∏≠‡∏Å‡πÅ‡∏ã‡∏•‡∏°‡∏≠‡∏ô", "‡∏Ç‡πâ‡∏≤‡∏ß‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á"],
        "‡∏ö‡∏¥‡∏™‡πÇ‡∏ó‡∏£‡πà‡∏™‡∏î‡πÉ‡∏™": ["‡∏û‡∏≤‡∏™‡∏ï‡πâ‡∏≤‡πÇ‡∏Æ‡∏•‡πÄ‡∏Å‡∏£‡∏ô", "‡πÇ‡∏ö‡∏•‡∏≠‡πÄ‡∏°‡∏î‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏£‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô"],
        "‡∏°‡∏∏‡∏°‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£": ["‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ú‡∏±‡∏î‡∏ú‡∏±‡∏Å", "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡πÑ‡∏Å‡πà"],
        "‡πÑ‡∏î‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏": ["‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°‡∏õ‡∏•‡∏≤", "‡πÇ‡∏à‡πä‡∏Å‡πÑ‡∏Å‡πà"]
    };
    
    let recommended = [];
    
    if (deficiencies.includes('‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô') && proteinFoods[restaurant.name]) {
        recommended.push(...proteinFoods[restaurant.name]);
    }
    
    if (deficiencies.includes('‡πÉ‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£') && fiberFoods[restaurant.name]) {
        recommended.push(...fiberFoods[restaurant.name]);
    }
    
    if (deficiencies.includes('‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà') && calorieFoods[restaurant.name]) {
        recommended.push(...calorieFoods[restaurant.name]);
    }
    
    // Remove duplicates and limit to 2 items
    return [...new Set(recommended)].slice(0, 2);
}

function showRestaurantDetailsWithNutrition(restaurant, deficiencies) {
    const healthyOptionsText = restaurant.healthyOptions.map(option => `‚Ä¢ ${option}`).join('\n');
    const recommendedFoods = getRecommendedFoodsForDeficiency(restaurant, deficiencies);
    
    let nutritionRecommendation = '';
    if (deficiencies.length > 0 && recommendedFoods.length > 0) {
        nutritionRecommendation = `\n\nüéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì:\n${recommendedFoods.map(food => `‚Ä¢ ${food}`).join('\n')}\n(‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ï‡πá‡∏°: ${deficiencies.join(', ')})`;
    }
    
    showModal(
        `${restaurant.emoji} ${restaurant.name}`,
        `üè™ ‡∏£‡πâ‡∏≤‡∏ô${restaurant.cuisine}\n\n` +
        `üìç ${restaurant.address}\n` +
        `üìû ${restaurant.phone}\n` +
        `‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ${restaurant.rating}\n` +
        `üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á ${restaurant.distance}\n\n` +
        `ü•ó ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û:\n${healthyOptionsText}${nutritionRecommendation}\n\n` +
        `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
        () => {
            showSuccessMessage(`üó∫Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ ${restaurant.name}...`);
        }
    );
}

// Legacy function - kept for compatibility
function displayRestaurantSuggestions() {
    displayRestaurantSuggestionsBasedOnDeficiency();
}

function showRestaurantDetails(restaurant) {
    const healthyOptionsText = restaurant.healthyOptions.map(option => `‚Ä¢ ${option}`).join('\n');
    
    showModal(
        `${restaurant.emoji} ${restaurant.name}`,
        `üè™ ‡∏£‡πâ‡∏≤‡∏ô${restaurant.cuisine}\n\n` +
        `üìç ${restaurant.address}\n` +
        `üìû ${restaurant.phone}\n` +
        `‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ${restaurant.rating}\n` +
        `üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á ${restaurant.distance}\n\n` +
        `ü•ó ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û:\n${healthyOptionsText}\n\n` +
        `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
        () => {
            showSuccessMessage(`üó∫Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ ${restaurant.name}...`);
        }
    );
}

function findMoreRestaurants() {
    showModal(
        'üè™ ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
        '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏∑‡πà‡∏ô‡πÜ:\n\n' +
        nearbyRestaurants.slice(3).map(restaurant => 
            `${restaurant.emoji} ${restaurant.name}\nüìè ${restaurant.distance} ‚Ä¢ ‚≠ê ${restaurant.rating}\nü•ó ${restaurant.healthyOptions[0]}`
        ).join('\n\n'),
        null
    );
}

function updateProgressBar() {
    try {
        const progressPercentage = Math.min((dailyCalories / calorieGoal) * 100, 100);
        const progressFill = document.querySelector('.progress-fill');
        const progressText = document.querySelector('.progress-text');
        const caloriesNumber = document.querySelector('.stat-number');
        
        if (progressFill) {
            progressFill.style.width = progressPercentage + '%';
        }
        
        if (progressText) {
            progressText.textContent = Math.round(progressPercentage) + '% of daily goal';
        }
        
        if (caloriesNumber) {
            caloriesNumber.textContent = dailyCalories.toLocaleString();
        }
        
        // Update ring progress if exists
        const ringProgress = document.querySelector('.ring-progress');
        if (ringProgress) {
            const circumference = 377; // 2œÄr
            const remaining = calorieGoal - dailyCalories;
            const offset = circumference * (1 - remaining / calorieGoal);
            ringProgress.style.strokeDashoffset = offset;
        }
        
        // Update ring numbers if exists
        const ringNumber = document.querySelector('.ring-label-number');
        if (ringNumber) {
            ringNumber.textContent = Math.max(0, calorieGoal - dailyCalories).toLocaleString();
        }
        
    } catch (error) {
        console.error('Error updating progress bar:', error);
    }
}

// Removed chat functionality for minimal design

// History screen functions
function exportReport() {
    showModal(
        '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
        '‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF',
        () => {
            showSuccessMessage('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
        }
    );
}

function shareWithFamily() {
    showModal(
        '‡πÅ‡∏ä‡∏£‡πå‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß',
        '‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß',
        () => {
            showSuccessMessage('‡πÅ‡∏ä‡∏£‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
        }
    );
}

// Removed profile functions for minimal design

// Modal functions
function showModal(title, text, onConfirm) {
    const modal = document.getElementById('modal');
    const modalTitle = document.getElementById('modal-title');
    const modalText = document.getElementById('modal-text');
    
    modalTitle.textContent = title;
    modalText.textContent = text;
    modal.classList.add('active');
    
    currentAction = onConfirm;
}

function closeModal() {
    const modal = document.getElementById('modal');
    modal.classList.remove('active');
    currentAction = null;
}

function confirmAction() {
    if (currentAction) {
        currentAction();
    }
    closeModal();
}

function showSuccessMessage(message) {
    showModal(
        '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
        message,
        null
    );
    
    // Auto-close success messages after 3 seconds
    setTimeout(() => {
        closeModal();
    }, 3000);
}

// Elder-friendly modal for food details and recommendations
function showElderFriendlyModal(title, data, type) {
    const modal = document.getElementById('modal');
    const modalTitle = document.getElementById('modal-title');
    const modalText = document.getElementById('modal-text');
    
    modalTitle.innerHTML = title;
    modalTitle.style.fontSize = '28px';
    modalTitle.style.color = '#22986a';
    modalTitle.style.marginBottom = '25px';
    modalTitle.style.textAlign = 'center';
    
    let content = '';
    
    if (type === 'food-detail') {
        content = `
            <div class="elder-food-detail">
                <div class="food-emoji">${data.emoji}</div>
                <div class="food-title">${data.name}</div>
                
                <div class="detail-section">
                    <div class="detail-label">üî• ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà</div>
                    <div class="detail-value">${data.calories} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà</div>
                </div>
                
                <div class="detail-section">
                    <div class="detail-label">üíä ‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£</div>
                    <div class="detail-value">${data.nutrients}</div>
                </div>
                
                <div class="detail-section">
                    <div class="detail-label">‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞</div>
                    <div class="detail-value">${data.time}</div>
                </div>
                
                <div class="detail-section reason-section">
                    <div class="detail-label">üí° ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•</div>
                    <div class="detail-value reason-text">${data.reason}</div>
                </div>
            </div>
        `;
    } else if (type === 'all-recommendations') {
        content = `
            <div class="elder-recommendations">
                <div class="recommendations-subtitle">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</div>
                ${data.map(food => `
                    <div class="recommendation-card">
                        <div class="rec-header">
                            <span class="rec-emoji">${food.emoji}</span>
                            <span class="rec-name">${food.name}</span>
                        </div>
                        <div class="rec-calories">${food.calories} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà</div>
                        <div class="rec-reason">üí° ${food.reason}</div>
                        <div class="rec-details">
                            <div>‚è∞ ${food.time}</div>
                            <div>üíä ${food.nutrients}</div>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }
    
    modalText.innerHTML = content;
    modalText.style.textAlign = 'left';
    modalText.style.lineHeight = '1.8';
    
    modal.classList.add('active');
    currentAction = null;
}

// Function to display current date
function displayCurrentDate() {
    const now = new Date();
    const day = now.getDate();
    const year = now.getFullYear();
    
    // Thai abbreviated month names
    const thaiMonths = [
        '‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.',
        '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.'
    ];
    
    const month = thaiMonths[now.getMonth()];
    
    const dateElement = document.getElementById('current-date');
    if (dateElement) {
        dateElement.textContent = `${day} ${month} ${year}`;
    }
}

// Family Mode Data
const familyMembers = {
    mom: {
        id: 'mom',
        name: '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏°‡πà ‡∏™‡∏°‡πÉ‡∏à',
        age: 65,
        conditions: ['‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á'],
        relation: '‡πÅ‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
        dailyTargets: {
            calories: 1500,
            protein: 75,
            carbs: 180,
            fat: 50,
            fiber: 25,
            sodium: 1500 // Lower for health conditions
        },
        currentIntake: {
            calories: 980,
            protein: 42,
            carbs: 120,
            fat: 28,
            fiber: 15,
            sodium: 2800 // High alert!
        },
        medications: [
            { name: '‡πÄ‡∏°‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¥‡∏ô', time: '19:00', type: '‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô' },
            { name: '‡∏•‡∏¥‡∏ã‡∏¥‡πÇ‡∏ô‡∏õ‡∏£‡∏¥‡∏•', time: '08:00', type: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô' }
        ]
    },
    dad: {
        id: 'dad',
        name: '‡∏Ñ‡∏∏‡∏ì‡∏û‡πà‡∏≠ ‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
        age: 68,
        conditions: ['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á'],
        relation: '‡∏û‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
        dailyTargets: {
            calories: 1800,
            protein: 90,
            carbs: 225,
            fat: 60,
            fiber: 25,
            sodium: 1800
        },
        currentIntake: {
            calories: 1200,
            protein: 55,
            carbs: 150,
            fat: 35,
            fiber: 18,
            sodium: 1200
        }
    },
    grandma: {
        id: 'grandma',
        name: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏≤‡∏¢ ‡∏õ‡∏£‡∏≤‡∏ì‡∏µ',
        age: 82,
        conditions: ['‡∏´‡∏±‡∏ß‡πÉ‡∏à', '‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô'],
        relation: '‡∏¢‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
        dailyTargets: {
            calories: 1300,
            protein: 65,
            carbs: 160,
            fat: 43,
            fiber: 20,
            sodium: 1200
        },
        currentIntake: {
            calories: 800,
            protein: 30,
            carbs: 100,
            fat: 20,
            fiber: 10,
            sodium: 800
        }
    }
};

let currentFamilyMember = 'mom';

// Family Mode Functions
function switchToProfile(memberId) {
    if (!familyMembers[memberId]) {
        console.error('Family member not found:', memberId);
        return;
    }
    
    // Update current family member
    currentFamilyMember = memberId;
    const member = familyMembers[memberId];
    
    // Update active profile display with error checking
    const nameElement = document.getElementById('active-profile-name');
    const detailsElement = document.getElementById('active-profile-details');
    const relationElement = document.getElementById('active-profile-relation');
    
    if (nameElement) nameElement.textContent = member.name;
    if (detailsElement) detailsElement.textContent = 
        `‡∏≠‡∏≤‡∏¢‡∏∏ ${member.age} ‡∏õ‡∏µ ‚Ä¢ ${member.conditions.join(' ‚Ä¢ ')}`;
    if (relationElement) relationElement.textContent = member.relation;
    
    // Update visual state - only if we're on family screen
    if (currentScreen === 'family') {
        document.querySelectorAll('.family-member-item').forEach(item => {
            item.classList.remove('active');
        });
        
        const selectedItem = document.querySelector(`[onclick="switchToProfile('${memberId}')"]`);
        if (selectedItem) {
            selectedItem.classList.add('active');
        }
    }
    
    // Update dashboard data to reflect this family member
    updateDashboardForFamilyMember(member);
    
    console.log(`Successfully switched to ${member.name}`);
}

function updateDashboardForFamilyMember(member) {
    try {
        if (!member) {
            console.error('No member data provided');
            return;
        }
        
        console.log('Updating dashboard for:', member.name);
        
        // Update global variables to reflect family member's data
        dailyCalories = member.currentIntake.calories;
        calorieGoal = member.dailyTargets.calories;
        currentIntake = { ...member.currentIntake };
        dailyTargets = { ...member.dailyTargets };
        
        console.log('Updated global variables:', {
            dailyCalories,
            calorieGoal,
            currentIntake,
            dailyTargets
        });
        
        // Update progress bar
        updateProgressBar();
        
    } catch (error) {
        console.error('Error updating dashboard for family member:', error);
    }
}

function speakFamilyMemberSummary() {
    const member = familyMembers[currentFamilyMember];
    if (!member) return;
    
    // Check if browser supports speech synthesis
    if (!('speechSynthesis' in window)) {
        showModal(
            '‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö',
            '‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
            null
        );
        return;
    }

    const voiceBtn = document.querySelector('.voice-btn');
    
    // If already speaking, stop it
    if (speechSynthesis.speaking) {
        speechSynthesis.cancel();
        voiceBtn.classList.remove('speaking');
        voiceBtn.innerHTML = '<i class="fas fa-volume-up"></i>';
        return;
    }

    // Create speech text for family member
    const summaryText = `‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á ${member.name} ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    
    ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${member.currentIntake.calories} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà ‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ${member.dailyTargets.calories} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
    
    ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô ${member.currentIntake.protein} ‡∏Å‡∏£‡∏±‡∏°
    
    ‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß 3 ‡∏°‡∏∑‡πâ‡∏≠
    
    ${member.currentIntake.sodium > member.dailyTargets.sodium ? '‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á' : '‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥'}
    
    ${member.conditions.length > 0 ? `‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${member.conditions.join(' ‡πÅ‡∏•‡∏∞ ')}` : ''}
    
    ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ`;

    const utterance = new SpeechSynthesisUtterance(summaryText);
    
    // Set Thai language and elder-friendly settings
    utterance.lang = 'th-TH';
    utterance.rate = 0.7; // Even slower for family mode
    utterance.pitch = 1.0;
    utterance.volume = 1.0;

    // Add visual feedback
    voiceBtn.classList.add('speaking');
    voiceBtn.innerHTML = '<i class="fas fa-stop"></i>';

    // Event listeners
    utterance.onend = function() {
        voiceBtn.classList.remove('speaking');
        voiceBtn.innerHTML = '<i class="fas fa-volume-up"></i>';
    };

    utterance.onerror = function(event) {
        console.error('Speech error:', event.error);
        voiceBtn.classList.remove('speaking');
        voiceBtn.innerHTML = '<i class="fas fa-volume-up"></i>';
    };

    // Speak the text
    speechSynthesis.speak(utterance);
}

function orderFoodForFamily() {
    const member = familyMembers[currentFamilyMember];
    if (!member) return;
    
    // Calculate what nutrients the family member needs
    const deficiencies = [];
    const remaining = {
        calories: member.dailyTargets.calories - member.currentIntake.calories,
        protein: member.dailyTargets.protein - member.currentIntake.protein,
        fiber: member.dailyTargets.fiber - member.currentIntake.fiber
    };
    
    if (remaining.calories > 200) deficiencies.push(`‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà ${remaining.calories} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà`);
    if (remaining.protein > 10) deficiencies.push(`‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô ${remaining.protein}g`);
    if (remaining.fiber > 5) deficiencies.push(`‡πÉ‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ${remaining.fiber}g`);
    
    const recommendedRestaurants = nearbyRestaurants.filter(r => 
        r.healthyOptions.some(option => 
            option.includes('‡πÇ‡∏ö‡∏•‡∏≠‡∏Å') || option.includes('‡∏™‡∏•‡∏±‡∏î') || option.includes('‡∏ú‡∏±‡∏Å')
        )
    );
    
    showModal(
        `üõí ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡πâ ${member.name}`,
        `‡∏à‡∏∞‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${member.name}\n\n` +
        `üçΩÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°:\n${deficiencies.map(d => `   ‚Ä¢ ${d}`).join('\n')}\n\n` +
        `üè™ ‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n${recommendedRestaurants.slice(0,2).map(r => `   ‚Ä¢ ${r.name}`).join('\n')}\n\n` +
        `‚ùì ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
        () => {
            showSuccessMessage(`‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ ${member.name} ‡πÅ‡∏•‡πâ‡∏ß\n\nüì± ‡∏à‡∏∞‡∏°‡∏µ SMS ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏™‡πà‡∏á\nüöó ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏∂‡∏á 30-45 ‡∏ô‡∏≤‡∏ó‡∏µ`);
        }
    );
}

function addMealForFamily() {
    const member = familyMembers[currentFamilyMember];
    if (!member) return;
    
    showModal(
        `üì∑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡πâ ${member.name}`,
        `‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà ${member.name} ‡∏ó‡∏≤‡∏ô\n\n` +
        `üè• ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á ${member.name}\n` +
        `   ‚Ä¢ ${member.conditions.join('\n   ‚Ä¢ ')}\n\n` +
        `üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß`,
        () => {
            // Switch to photo screen and trigger photo upload
            showScreen('photo');
            setTimeout(() => {
                triggerPhotoUpload();
            }, 500);
        }
    );
}

function showHealthReminders() {
    const member = familyMembers[currentFamilyMember];
    if (!member || !member.medications) {
        showModal(
            'üíä ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏¢‡∏≤',
            `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${member ? member.name : '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'}`,
            null
        );
        return;
    }
    
    const medicationList = member.medications.map(med => 
        `üíä ${med.name}\n   ‚è∞ ${med.time} ‡∏ô.\n   üè• ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö${med.type}`
    ).join('\n\n');
    
    showModal(
        `üíä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á ${member.name}`,
        `üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô:\n\n${medicationList}\n\n‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:\n   ‚Ä¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤\n   ‚Ä¢ ‡πÑ‡∏°‡πà‡∏Ç‡πâ‡∏≤‡∏°‡∏°‡∏∑‡πâ‡∏≠\n   ‚Ä¢ ‡∏ó‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£`,
        null
    );
}

function showProfileSwitcher() {
    const membersList = Object.values(familyMembers).map(member => 
        `${member.name} (${member.relation})`
    ).join('\n');
    
    showModal(
        'üë• ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå',
        `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•:\n\n${membersList.map(m => `   ‚Ä¢ ${m}`).join('\n')}\n\nüì± ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô`,
        null
    );
}

function showAddMemberModal() {
    showModal(
        '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß',
        'üöß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏°‡∏≤‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ!\n\n' +
        '‚ú® ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏µ:\n' +
        '   ‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà\n' +
        '   ‚Ä¢ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•\n' +
        '   ‚Ä¢ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£\n' +
        '   ‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß\n\n' +
        'üìß ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏≤‡∏á email',
        null
    );
}

// Text-to-Speech function for today's summary
function speakTodaySummary() {
    // Check if browser supports speech synthesis
    if (!('speechSynthesis' in window)) {
        showModal(
            '‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö',
            '‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
            null
        );
        return;
    }

    const voiceBtn = document.querySelector('.voice-btn');
    
    // If already speaking, stop it
    if (speechSynthesis.speaking) {
        speechSynthesis.cancel();
        voiceBtn.classList.remove('speaking');
        voiceBtn.innerHTML = '<i class="fas fa-volume-up"></i>';
        return;
    }

    // Create speech text in Thai
    const summaryText = `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${dailyCalories} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà ‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ${calorieGoal} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà 
    ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô ${currentIntake.protein} ‡∏Å‡∏£‡∏±‡∏° 
    ‡πÅ‡∏•‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ${document.querySelectorAll('#history-screen .meal-item').length} ‡∏°‡∏∑‡πâ‡∏≠ 
    ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ`;

    const utterance = new SpeechSynthesisUtterance(summaryText);
    
    // Set Thai language
    utterance.lang = 'th-TH';
    utterance.rate = 0.8; // Slower speech for elder users
    utterance.pitch = 1.0;
    utterance.volume = 1.0;

    // Add visual feedback
    voiceBtn.classList.add('speaking');
    voiceBtn.innerHTML = '<i class="fas fa-stop"></i>';

    // Event listeners
    utterance.onstart = function() {
        console.log('Speech started');
    };

    utterance.onend = function() {
        voiceBtn.classList.remove('speaking');
        voiceBtn.innerHTML = '<i class="fas fa-volume-up"></i>';
    };

    utterance.onerror = function(event) {
        console.error('Speech error:', event.error);
        voiceBtn.classList.remove('speaking');
        voiceBtn.innerHTML = '<i class="fas fa-volume-up"></i>';
        showModal(
            '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
            null
        );
    };

    // Try to find Thai voice or use default
    const voices = speechSynthesis.getVoices();
    const thaiVoice = voices.find(voice => voice.lang.includes('th')) || voices[0];
    if (thaiVoice) {
        utterance.voice = thaiVoice;
    }

    // Speak the text
    speechSynthesis.speak(utterance);
}

// Initialize app
document.addEventListener('DOMContentLoaded', function() {
    // Show dashboard screen by default
    showScreen('dashboard');
    
    // Display current date
    displayCurrentDate();
    
    // Initialize progress bar
    updateProgressBar();
    
    // Populate food recommendations on dashboard
    populateFoodRecommendations();
    
    // Initialize family mode if on family screen
    if (currentScreen === 'family') {
        const defaultMember = familyMembers[currentFamilyMember];
        if (defaultMember) {
            updateDashboardForFamilyMember(defaultMember);
        }
    }
    
    // Add click handlers for meal items
    const mealItems = document.querySelectorAll('.meal-item');
    mealItems.forEach(item => {
        item.addEventListener('click', function() {
            const mealName = this.querySelector('h4').textContent;
            showModal(
                '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
                `${mealName}\n\n‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ`,
                null
            );
        });
    });
    
    // Add photo input event listener for nutrient analysis
    const photoInput = document.getElementById('photo-input');
    if (photoInput) {
        photoInput.addEventListener('change', handlePhotoUpload);
    }
    
    // Add keyboard navigation support
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeModal();
        }
    });
});

// Add touch feedback for better mobile experience
document.addEventListener('touchstart', function() {}, true);

// Prevent zoom on double tap for better mobile experience
let lastTouchEnd = 0;
document.addEventListener('touchend', function(event) {
    const now = (new Date()).getTime();
    if (now - lastTouchEnd <= 300) {
        event.preventDefault();
    }
    lastTouchEnd = now;
}, false);

// Add haptic feedback simulation
function simulateHapticFeedback() {
    // This would trigger actual haptic feedback on mobile devices
    if (navigator.vibrate) {
        navigator.vibrate(10);
    }
}

// Add haptic feedback to buttons
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('btn') || e.target.classList.contains('nav-btn')) {
        simulateHapticFeedback();
    }
});

// Smooth scrolling for chat messages
function scrollToBottom(element) {
    element.scrollTo({
        top: element.scrollHeight,
        behavior: 'smooth'
    });
}

// Add accessibility features
document.addEventListener('DOMContentLoaded', function() {
    // Add focus indicators
    const focusableElements = document.querySelectorAll('button, input, [tabindex]');
    focusableElements.forEach(element => {
        element.addEventListener('focus', function() {
            this.style.outline = '3px solid #4CAF50';
        });
        
        element.addEventListener('blur', function() {
            this.style.outline = 'none';
        });
    });
    
    // Add ARIA labels
    const buttons = document.querySelectorAll('button');
    buttons.forEach(button => {
        if (!button.getAttribute('aria-label') && button.textContent.trim()) {
            button.setAttribute('aria-label', button.textContent.trim());
        }
    });
});

// Performance optimization
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Optimize search and input handlers
const debouncedSearch = debounce((query) => {
    // Search functionality would go here
    console.log('Searching for:', query);
}, 300);

// Add service worker for offline capability (basic setup)
if ('serviceWorker' in navigator) {
    window.addEventListener('load', function() {
        // Service worker would be registered here for offline functionality
        console.log('Service worker support detected');
    });
}

// Add responsive design helpers
function updateViewportHeight() {
    const vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

window.addEventListener('resize', debounce(updateViewportHeight, 100));
updateViewportHeight();

// Add dark mode support (if needed in future)
function toggleDarkMode() {
    document.body.classList.toggle('dark-mode');
    localStorage.setItem('darkMode', document.body.classList.contains('dark-mode'));
}

// Load dark mode preference
document.addEventListener('DOMContentLoaded', function() {
    if (localStorage.getItem('darkMode') === 'true') {
        document.body.classList.add('dark-mode');
    }
});

// Add animation helpers
function animateValue(element, start, end, duration) {
    const startTime = performance.now();
    const animate = (currentTime) => {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        const current = start + (end - start) * progress;
        element.textContent = Math.round(current);
        
        if (progress < 1) {
            requestAnimationFrame(animate);
        }
    };
    requestAnimationFrame(animate);
}

// Add loading states
function showLoading(element) {
    element.innerHTML = '<span class="material-icons">hourglass_empty</span> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...';
    element.disabled = true;
}

function hideLoading(element, originalText) {
    element.innerHTML = originalText;
    element.disabled = false;
}

// Add error handling
window.addEventListener('error', function(e) {
    console.error('Application error:', e.error);
    // Don't show modal for every error to avoid interference
    if (e.error && e.error.message && !e.error.message.includes('Family')) {
        showModal(
            'Error',
            'Something went wrong. Please try again.',
            null
        );
    }
});

// Add performance monitoring
function measurePerformance(name, fn) {
    const start = performance.now();
    const result = fn();
    const end = performance.now();
    console.log(`${name} took ${end - start} milliseconds`);
    return result;
}